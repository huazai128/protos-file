// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.27.1
// source: error.proto

/* eslint-disable */
import { Observable } from "rxjs";

export const protobufPackage = "errorproto";

/** TransportCategory enum */
export enum TransportCategory {
  UNKNOWN = 0,
  API = 1,
  CUSTOM = 2,
  EVENT = 3,
  UNRECOGNIZED = -1,
}

/** BreadcrumbsType message */
export interface BreadcrumbsType {
  type: TransportCategory;
  monitorId: string;
}

/** Meta message represents metadata about the error */
export interface Meta {
  col: number;
  file: string;
  row: number;
  method: string;
  url: string;
  body: Uint8Array;
  requestTime: number;
  responseTime: number;
  status: number;
  statusText: string;
  response: Uint8Array;
  params: Uint8Array;
  componentName: string;
}

/** StackTrace message represents a stack trace entry */
export interface StackTrace {
  colno: number;
  filename: string;
  functionName: string;
  lineno: number;
}

/** Error message represents the main error data */
export interface Error {
  breadcrumbs: BreadcrumbsType[];
  meta: Meta | undefined;
  stackTrace: StackTrace[];
  errorType: string;
  value: string;
  events: string;
  id: string;
  createAt: Date | undefined;
  updateAt: Date | undefined;
  siteId: string;
  reportsType: string;
  recordKeys: string[];
  errorDetailList: string[];
}

/** Request messages */
export interface GetErrorLogsRequest {
  page: number;
  size: number;
  sort: string;
  type: string;
  filters: { [key: string]: string };
}

export interface GetErrorLogsRequest_FiltersEntry {
  key: string;
  value: string;
}

export interface GetErrorListRequest {
  type: string;
  timeSlot: string;
  filters: { [key: string]: string };
}

export interface GetErrorListRequest_FiltersEntry {
  key: string;
  value: string;
}

export interface GetErrorOverviewRequest {
  siteId: string;
}

export interface GetErrorValuesRequest {
  page: number;
  size: number;
  siteId: string;
}

export interface GetErrorCountRequest {
  startTime: Date | undefined;
  endTime: Date | undefined;
  filters: { [key: string]: string };
}

export interface GetErrorCountRequest_FiltersEntry {
  key: string;
  value: string;
}

export interface GetErrorStatisticsPaginateRequest {
  page: number;
  size: number;
  reportsType: string;
  filters: { [key: string]: string };
}

export interface GetErrorStatisticsPaginateRequest_FiltersEntry {
  key: string;
  value: string;
}

export interface GetErrorInfoRequest {
  id: number;
}

/** Response messages */
export interface PaginateResponse {
  docs: Error[];
  total: number;
  page: number;
  limit: number;
}

export interface ErrorListResponse {
  data: ErrorData[];
}

export interface ErrorData {
  startTime: Date | undefined;
  count: number;
}

export interface ErrorOverviewResponse {
  totalErrors: number;
  todayErrors: number;
  yesterdayErrors: number;
  weekAgoErrors: number;
}

export interface ErrorValuesResponse {
  values: ErrorValue[];
  total: number;
  page: number;
  limit: number;
}

export interface ErrorValue {
  value: string;
  count: number;
}

export interface ErrorCountResponse {
  data: ErrorCount[];
}

export interface ErrorCount {
  time: Date | undefined;
  count: number;
}

export interface ErrorStatisticsPaginateResponse {
  docs: ErrorStatistics[];
  total: number;
  page: number;
  limit: number;
}

export interface ErrorStatistics {
  errorType: string;
  value: string;
  count: number;
  lastOccurrence: Date | undefined;
}

/** ErrorService defines the service for error handling */
export interface ErrorService {
  /** Get error logs with pagination */
  getErrorLogs(request: GetErrorLogsRequest): Observable<PaginateResponse>;
  /** Get error list with aggregation */
  getErrorList(request: GetErrorListRequest): Observable<ErrorListResponse>;
  /** Get error overview statistics */
  getErrorOverview(request: GetErrorOverviewRequest): Observable<ErrorOverviewResponse>;
  /** Get error values statistics */
  getErrorValues(request: GetErrorValuesRequest): Observable<ErrorValuesResponse>;
  /** Get error count for specific time period */
  getErrorCount(request: GetErrorCountRequest): Observable<ErrorCountResponse>;
  /** Get paginated error statistics */
  getErrorStatisticsPaginate(request: GetErrorStatisticsPaginateRequest): Observable<ErrorStatisticsPaginateResponse>;
  /** Get error info by ID */
  getErrorInfo(request: GetErrorInfoRequest): Observable<Error>;
}
