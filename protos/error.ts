// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.27.1
// source: error.proto

/* eslint-disable */
import { Observable } from "rxjs";
import { type QueryDTO } from "./common/query_dto";

export const protobufPackage = "errorproto";

export interface PaginateOptions {
  page: number;
  limit: number;
  sort: string;
}

export interface ErrorLog {
  id: string;
  title: string;
  path: string;
  href: string;
  value: string;
  reportsType: string;
  meta: Meta | undefined;
  createdAt: string;
  updatedAt: string;
}

export interface Meta {
  url: string;
  body: string;
  params: string;
  file: string;
}

export interface ErrorLogsRequest {
  page: number;
  size: number;
  sort: number;
  type: string;
  keyword: string;
}

export interface ErrorLogsResponse {
  docs: ErrorLog[];
  totalDocs: number;
  limit: number;
  totalPages: number;
  page: number;
  pagingCounter: number;
  hasPrevPage: boolean;
  hasNextPage: boolean;
  prevPage: number;
  nextPage: number;
}

export interface ErrorListRequest {
  type: string;
  keyword: string;
  timeSlot: string;
}

export interface ErrorListResponse {
  items: ErrorListItem[];
}

export interface ErrorListItem {
  startTime: string;
  count: number;
}

export interface ErrorOverviewRequest {
  siteId: string;
}

export interface ErrorOverviewResponse {
  totalCount: number;
  todayCount: number;
  yesterdayCount: number;
  weekCount: number;
}

export interface ErrorValuesRequest {
  siteId: string;
  page: number;
  size: number;
}

export interface ErrorValuesResponse {
  docs: ErrorValueItem[];
  totalDocs: number;
  limit: number;
  totalPages: number;
  page: number;
  pagingCounter: number;
  hasPrevPage: boolean;
  hasNextPage: boolean;
  prevPage: number;
  nextPage: number;
}

export interface ErrorValueItem {
  value: string;
  count: number;
}

export interface ErrorCountRequest {
  startTime: string;
  endTime: string;
  keyword: string;
}

export interface ErrorCountResponse {
  count: number;
  yesterdayCount: number;
  weekCount: number;
}

export interface ErrorStatisticsPaginateRequest {
  page: number;
  size: number;
  keyword: string;
  reportsType: string;
}

export interface ErrorStatisticsPaginateResponse {
  docs: ErrorStatisticsItem[];
  totalDocs: number;
  limit: number;
  totalPages: number;
  page: number;
  pagingCounter: number;
  hasPrevPage: boolean;
  hasNextPage: boolean;
  prevPage: number;
  nextPage: number;
}

export interface ErrorStatisticsItem {
  value: string;
  count: number;
  lastOccurredAt: string;
}

export interface ErrorInfoRequest {
  id: number;
}

export interface ErrorInfoResponse {
  error: ErrorLog | undefined;
}

export interface ErrorService {
  getErrorLogs(request: QueryDTO): Observable<ErrorLogsResponse>;
  getErrorList(request: ErrorListRequest): Observable<ErrorListResponse>;
  getErrorOverview(request: ErrorOverviewRequest): Observable<ErrorOverviewResponse>;
  getErrorValues(request: ErrorValuesRequest): Observable<ErrorValuesResponse>;
  getErrorCount(request: ErrorCountRequest): Observable<ErrorCountResponse>;
  getErrorStatisticsPaginate(request: ErrorStatisticsPaginateRequest): Observable<ErrorStatisticsPaginateResponse>;
  getErrorInfo(request: ErrorInfoRequest): Observable<ErrorInfoResponse>;
}
